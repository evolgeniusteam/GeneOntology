#!/usr/bin/perl -w
use strict;
## USAGE:
## input file: the outfile from perl script go_new_chenwh_multiple_input.pl

use Getopt::Long;
#use Data::Dumper;

my %opts=();
GetOptions(\%opts,"i:s","o:s","n1:n","n2:n");

if (!$opts{i} or !$opts{o}){
    print "----------------------------------------------------------------------
    USAGE: perl $0
        -i input go_classification file, which is generated by two GO files
        -n1 total number of genes classified by GO in file 1, with more genes
        -n2 total number of genes classified by GO in file 2
        -o out file
----------------------------------------------------------------------\n";
    exit;
    
}
my $start_time=time;

my ($total1,$total2) = ($opts{n1}, $opts{n2});

my ($goTerm, $data1, $data2) = ();
open OUT,">$opts{o}" or die "Cannot create file: $opts{o}!\n";
open IN, $opts{i} or die "Cannot open file: $opts{i}!\n";
while(<IN>){
    chomp;
    if(/^\t\S+/){
        ($data1, $data2) = ();
        ($goTerm) = /^\t(.*)/;
    }elsif(/\t\t(\d+)/){
        if(!$data1){
            $data1 = $1;
        }else{
            $data2 = $1;
            ### do the analysis
            my $dhyper = hypergeom($data1, $total1-$data1, $total2, $data2); # good balls, bad balls, polled balls, polled good balls
            use Text::NSP::Measures::2D::Fisher2::twotailed;
            my $fisher= calculateStatistic(n11=>$data2, n1p=>$total2, np1=>$data1+$data2, npp=>$total1+$total2);
            my $tag = ($data2/$total2 > $data1/$total1) ? 'enriched' : 'depleted';
            print OUT "\t",$goTerm,"\t",$data1,"\t",$data2,"\t",$dhyper,"\t",$fisher,"\t",$tag,"\n";
        }
    }else{
        print OUT $_,"\n";
    }
}
close IN;
close OUT;
print "Time used : ",time-$start_time," seconds!!\n";

#### sub functions

##################################################################
# -------->
# Hyper Geometric distribution
sub hypergeom {
    my ($n, $m, $N, $i) = @_;
    # There are n "good" and m "bad" balls in an urn.
    # Pick N of them. The probability of i or more successful selections:
    # (m!n!N!(m+n-N)!)/(i!(n-i)!(m+i-N)!(N-i)!(m+n)!)
    my $loghyp1 = logfact($m)+logfact($n)+logfact($N)+logfact($m+$n-$N);
    my $loghyp2 = logfact($i)+logfact($n-$i)+logfact($m+$i-$N)+logfact($N-$i)+logfact($m+$n);
    return exp($loghyp1 - $loghyp2);
}

sub logfact {
    return gammln(shift(@_) + 1.0);
}

sub gammln {
    my $xx = shift;
    my @cof = (76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.12086509738661e-2, -0.5395239384953e-5);
    my $y = my $x = $xx;
    my $tmp = $x + 5.5;
    $tmp -= ($x + .5) * log($tmp);
    my $ser = 1.000000000190015;
    for my $j (0..5) {
        $ser += $cof[$j]/++$y;
    }
    return log(2.5066282746310005*$ser/$x) - $tmp;
}
# Hyper Geometric distribution
# <--------
##################################################################
